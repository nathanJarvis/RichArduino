{\rtf1\ansi\ansicpg1252\cocoartf1671\cocoasubrtf400
{\fonttbl\f0\fswiss\fcharset0 ArialMT;}
{\colortbl;\red255\green255\blue255;\red26\green26\blue26;\red26\green26\blue26;}
{\*\expandedcolortbl;;\csgenericrgb\c10196\c10196\c10196;\csgenericrgb\c10196\c10196\c10196;}
\margl1440\margr1440\vieww12540\viewh14580\viewkind1
\deftab720
\pard\pardeftab720\ri0\sl220\partightenfactor0

\f0\fs20 \cf2 la r31, LOOP\'a0 \'a0		//Loop address\
la r7, LOOP2\'a0 \'a0		//Loop2 address\
la r25, LOOP3\'a0 \'a0	//Loop3 for header checking\
la r8, 3\'a0 \'a0 \'a0 \'a0		//4byte count\'a0\
\pard\pardeftab720\ri0\sl220\partightenfactor0
\cf3 la r17, 0		//program count\cf2 \
\cf3 la r14, 0\'a0 \'a0 \'a0 \'a0		//initialize header valid to 0\'a0\
la r18, 0\'a0 \'a0 \'a0 \'a0		//initialize header data to 0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0 \'a0\'a0\cf2 \
\pard\pardeftab720\ri0\sl220\partightenfactor0
\cf2 la r30, 1\
shl r30, r30, 13  	//I2C address\'a0 \'a0 \'a0 \'a0 \'a0 \'a0\
la r1, 0\'a0\'a0		//register to store compared values\
la r26, 1\
shl r26, r26, 12  	//Sram address that don't change\
addi r26, r26, 4\
la r27, 1\
shl r27, r27, 12 		//Sram address that change\
LOOP: ld r1,(r30) 	//load valid bit\'a0 \'a0\
andi r2, r1, 1\'a0 \'a0		//check valid bit\
brzr r31, r2\'a0 \'a0\'a0\
ld r1, (r30)\'a0		//read byte count\
sub r2, r8, r1\'a0 		//compare to 3\
brpl r31, r2\'a0 \'a0 		//branch if >= 3\
LOOP2: ld r1, 1(r30) 	//read valid bit\
andi r2, r1, 1		//check valid bit\
brzr r7, r2\
ld r1, (r30)\'a0 \'a0 		//read data\
addi\'a0 r18, r1, 0 		//store data to r18\
st r1, (r27)\'a0 \'a0 		//store to Sram\
addi r27, r27, 4\
brzr r25, r14	\'a0	//branch if no valid header\
sub r17, r17, r14 	//subtract 1 from program counter\
brnz r31,r17\'a0 \'a0 \'a0		//keep reading if pc is not zero\
br r26		\'a0	//go to sram if pc is zero\
LOOP3: la r14, 1 	//valid header exist\
addi r17, r18, 0 		//loading valid header to r17\
br r31 			//branch back to beginning to read actual program\
stop\
}